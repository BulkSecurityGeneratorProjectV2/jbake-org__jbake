import java.time.format.DateTimeFormatter

plugins {
    id "io.github.gradle-nexus.publish-plugin"  version "1.0.0"
    id 'com.github.ben-manes.versions'          version '0.38.0'
    id 'org.ajoberstar.grgit'                   version "$grgitVersion"
    id "eclipse"
    id "idea"
}

def buildTimeAndDate = grgit.head().dateTime

// common variables
ext {
    isTravis = (System.getenv("TRAVIS") == "true")
    isTravisPullRequest = (System.getenv("TRAVIS_PULL_REQUEST")) != "false"
    pullRequestId = System.getenv("TRAVIS_PULL_REQUEST")
    pullRequestBranch = System.getenv("TRAVIS_PULL_REQUEST_BRANCH")
    hasGithub = System.getenv("GITHUBTOKEN") && System.getenv("GITHUBREPO")
    hasSonar = System.getenv("SONARORG") && System.getenv("SONARLOGIN")
    sonarDefaultURL = "https://sonarcloud.io"
    sonarDefaultProjectKey = "org.jbake:jbake-base:jbake-core"
    sonarURL = System.getenv("SONARHOST") ?: sonarDefaultURL
    sonarProjectKey = System.getenv("SONARPROJECTKEY") ?: sonarDefaultProjectKey
    buildDate = buildTimeAndDate.format(DateTimeFormatter.ofPattern('yyyy-MM-dd'))
    buildTime = buildTimeAndDate.format(DateTimeFormatter.ofPattern('HH:mm:ss.SSSZ'))
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]?${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
